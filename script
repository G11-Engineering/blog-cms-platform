#!/bin/bash

# 02 Blog Platform - Main Management Script
# Usage: ./script [start|stop|restart|status|logs|clean]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Function to show usage
show_usage() {
    echo "02 Blog Platform Management Script"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  start     Start all services"
    echo "  stop      Stop all services"
    echo "  restart   Restart all services"
    echo "  status    Show service status"
    echo "  logs      Show service logs"
    echo "  clean     Clean up containers and volumes"
    echo "  help      Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 start"
    echo "  $0 stop"
    echo "  $0 restart"
    echo "  $0 status"
    echo "  $0 logs frontend"
}

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker first."
        exit 1
    fi
}

# Function to get docker compose command
get_docker_compose() {
    if command -v docker compose &> /dev/null; then
        echo "docker compose"
    elif command -v docker-compose &> /dev/null; then
        echo "docker-compose"
    else
        print_error "Docker Compose is not available. Please install Docker Compose."
        exit 1
    fi
}

# Main script logic
case "${1:-help}" in
    start)
        print_info "Starting 02 Blog Platform..."
        check_docker
        if [ -f "$SCRIPTS_DIR/start.sh" ]; then
            chmod +x "$SCRIPTS_DIR/start.sh"
            "$SCRIPTS_DIR/start.sh"
        else
            print_error "Start script not found!"
            exit 1
        fi
        ;;
    stop)
        print_info "Stopping 02 Blog Platform..."
        check_docker
        if [ -f "$SCRIPTS_DIR/stop.sh" ]; then
            chmod +x "$SCRIPTS_DIR/stop.sh"
            "$SCRIPTS_DIR/stop.sh"
        else
            print_error "Stop script not found!"
            exit 1
        fi
        ;;
    restart)
        print_info "Restarting 02 Blog Platform..."
        check_docker
        if [ -f "$SCRIPTS_DIR/restart.sh" ]; then
            chmod +x "$SCRIPTS_DIR/restart.sh"
            "$SCRIPTS_DIR/restart.sh"
        else
            print_error "Restart script not found!"
            exit 1
        fi
        ;;
    status)
        print_info "Checking service status..."
        check_docker
        DOCKER_COMPOSE=$(get_docker_compose)
        $DOCKER_COMPOSE ps
        ;;
    logs)
        check_docker
        DOCKER_COMPOSE=$(get_docker_compose)
        if [ -n "$2" ]; then
            print_info "Showing logs for $2..."
            $DOCKER_COMPOSE logs -f "$2"
        else
            print_info "Showing logs for all services..."
            $DOCKER_COMPOSE logs -f
        fi
        ;;
    clean)
        print_warning "Cleaning up containers and volumes..."
        check_docker
        DOCKER_COMPOSE=$(get_docker_compose)
        $DOCKER_COMPOSE down -v --remove-orphans
        docker system prune -f
        print_status "Cleanup completed!"
        ;;
    help|--help|-h)
        show_usage
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_usage
        exit 1
        ;;
esac
